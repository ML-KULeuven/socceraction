[tool.poetry]
name = "socceraction"
version = "1.1.2"
description = "Convert soccer event stream data to the SPADL format and value on-the-ball player actions"
authors = ["Tom Decroos <tom.decroos.be@gmail.com>", "Pieter Robberechts <pieter.robberechts@kuleuven.be>"]
license = "MIT"
readme = 'README.md'
homepage = "https://github.com/ML-KULeuven/socceraction"
repository = "https://github.com/ML-KULeuven/socceraction"
documentation = "https://socceraction.readthedocs.io"
keywords = ["soccer", "football", "sports analytics"]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent"
]

[tool.poetry.dependencies]
python = ">=3.7.1,<3.11"
pandas = "^1.3.3"
pandera = ">=0.7.1,<0.9.0"
numpy = "^1.21.2"
scikit-learn = ">=0.24.2,<1.1.0"
requests = "^2.26.0"
lxml = "^4.6.3"
Unidecode = "^1.3.2"

[tool.poetry.dev-dependencies]
black = "^21.12b0"
bumpversion = "^0.6.0"
flake8 = "^4.0.1"
mypy = "^0.910"
pylint = "^2.12.2"
pytest = "^6.2.5"
pytest-mock = "^3.6.1"
unify = "^0.5"
types-requests = "^2.26.1"
xgboost = "^1.5.1"
tables = "^3.6.1"
Sphinx = "^4.3.1"
furo = "^2021.11.23"
tqdm = "^4.62.3"
coverage = { version="^6.2", extras=["toml"] }
pytest-cov = "^3.0.0"
flake8-black = "^0.2.3"
flake8-bugbear = "^21.11.29"
flake8-annotations = "^2.7.0"
flake8-docstrings = "^1.6.0"
darglint = "^1.8.1"
flake8-isort = "^4.1.1"
sphinx-autodoc-typehints = "^1.12.0"
codecov = "^2.1.12"
flake8-rst-docstrings = "^0.2.5"
pre-commit = "^2.16.0"
sphinx-autobuild = "^2021.3.14"
pep8-naming = "^0.12.1"
Pygments = "^2.10.0"

[tool.pytest.ini_options]
filterwarnings = "ignore::DeprecationWarning:tables.*:"

[tool.coverage.paths]
source = ["socceraction", "*/site-packages"]

[tool.coverage.run]
branch = true
source = ["socceraction"]

[tool.coverage.report]
show_missing = true

[tool.isort]
profile = "black"
src_paths = ["socceraction", "tests"]
balanced_wrapping = true
default_section = "THIRDPARTY"
include_trailing_comma = true
known_first_party = ["socceraction", "tests"]
line_length = 79
multi_line_output = 3

[tool.black]
line-length = 99
target-version = ['py38']
skip-string-normalization = 1
include = '\.pyi?$'

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true

[[tool.mypy.overrides]]
module = ["test.*"]
disallow_untyped_defs = true

[[tool.mypy.overrides]]
module = ["nox.*", "pytest", "pytest_mock", "_pytest.*"]
ignore_missing_imports = true

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
