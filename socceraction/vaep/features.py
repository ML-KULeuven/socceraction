"""Implements the feature tranformers of the VAEP framework."""

from typing import Callable

import numpy as np
import pandas as pd

import socceraction.features as fs
from socceraction import spadl
from socceraction.features.utils import create_gamestate_features
from socceraction.types import Actions, Features, GameStates
from socceraction.utils import deprecated

FeatureTransfomer = Callable[..., Features]


def feature_column_names(fs: list[FeatureTransfomer], nb_prev_actions: int = 3) -> list[str]:
    """Return the names of the features generated by a list of transformers.

    Parameters
    ----------
    fs : list(callable)
        A list of feature transformers.
    nb_prev_actions : int, default=3  # noqa: DAR103
        The number of previous actions included in the game state.

    Returns
    -------
    list(str)
        The name of each generated feature.
    """
    spadlcolumns = [
        "game_id",
        "original_event_id",
        "action_id",
        "period_id",
        "time_seconds",
        "team_id",
        "player_id",
        "start_x",
        "start_y",
        "end_x",
        "end_y",
        "result_id",
        "result_name",
        "bodypart_id",
        "bodypart_name",
        "type_id",
        "type_name",
    ]
    dummy_actions = pd.DataFrame(np.zeros((10, len(spadlcolumns))), columns=spadlcolumns)
    for c in spadlcolumns:
        if "name" in c:
            dummy_actions[c] = dummy_actions[c].astype(str)
    gs = gamestates(dummy_actions, nb_prev_actions)  # type: ignore
    return list(pd.concat([f(gs) for f in fs], axis=1).columns.values)


@deprecated("Use socceraction.spadl.to_gamestates instead.")
def gamestates(actions: Actions, nb_prev_actions: int = 3) -> GameStates:
    """See socceraction.atomic_spadl.to_gamestates."""
    return spadl.to_gamestates(actions, nb_prev_actions)


@deprecated("Use socceraction.spadl.play_left_to_right instead.")
def play_left_to_right(gamestates: GameStates, home_team_id: int) -> GameStates:
    """See socceraction.atomic_spadl.play_left_to_right."""
    return spadl.play_left_to_right(gamestates, home_team_id)


# SIMPLE FEATURES
actiontype = create_gamestate_features(fs.actiontype)
actiontype_onehot = create_gamestate_features(fs.actiontype_onehot)
result = create_gamestate_features(fs.result)
result_onehot = create_gamestate_features(fs.result_onehot)
actiontype_result_onehot = create_gamestate_features(fs.actiontype_result_onehot)
bodypart = create_gamestate_features(fs.bodypart)
bodypart_detailed = create_gamestate_features(fs.bodypart_detailed)
bodypart_onehot = create_gamestate_features(fs.bodypart_onehot)
bodypart_detailed_onehot = create_gamestate_features(fs.bodypart_detailed_onehot)
time = create_gamestate_features(fs.time)
startlocation = create_gamestate_features(fs.startlocation)
endlocation = create_gamestate_features(fs.endlocation)
startpolar = create_gamestate_features(fs.startpolar)
endpolar = create_gamestate_features(fs.endpolar)
movement = create_gamestate_features(fs.movement)
player_possession_time = create_gamestate_features(fs.player_possession_time)

# STATE FEATURES
team = fs.team
time_delta = fs.time_delta
space_delta = fs.space_delta
speed = fs.speed

# CONTEXT FEATURES
goalscore = create_gamestate_features(fs.goalscore)
