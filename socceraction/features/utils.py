from functools import wraps
from typing import no_type_check

import numpy as np
import pandas as pd

from socceraction.spadl import to_gamestates
from socceraction.types import GameStates, GameStatesFeatureTransfomer


@no_type_check
def ftype(value):
    """
    This method returns a decorator that sets the property key of the function to value
    """

    def decorate_func(func):
        assert value in ["actions", "gamestates", "events"], f"Invalid ftype: {value}"

        def feature_transformer(data, mask=None, **kwargs):
            if mask is None:
                if value == "gamestates":
                    return func(data, [True] * len(data[0]))
                return func(data, [True] * len(data), **kwargs)
            return func(data, mask, **kwargs)

        feature_transformer.ftype = value
        return feature_transformer

    return decorate_func


@no_type_check
def simple(actionfn) -> GameStatesFeatureTransfomer:
    """Make a function decorator to apply actionfeatures to game states.

    Parameters
    ----------
    actionfn : callable
        A feature transformer that operates on actions.

    Returns
    -------
    GameStatesFeatureTransfomer
        A feature transformer that operates on game states.
    """

    @wraps(actionfn)
    def _wrapper(gamestates: GameStates, **kwargs) -> pd.DataFrame:
        if not isinstance(gamestates, (list,)):
            gamestates = [gamestates]
        X = []
        for i, a in enumerate(gamestates):
            Xi = actionfn(a, **kwargs)
            Xi.columns = [c + "_a" + str(i) for c in Xi.columns]
            X.append(Xi)
        return pd.concat(X, axis=1)

    return _wrapper


def feature_column_names(
    fs: list[GameStatesFeatureTransfomer], nb_prev_actions: int = 3
) -> list[str]:
    """Return the names of the features generated by a list of transformers.

    Parameters
    ----------
    fs : list(callable)
        A list of feature transformers.
    nb_prev_actions : int, default=3  # noqa: DAR103
        The number of previous actions included in the game state.

    Returns
    -------
    list(str)
        The name of each generated feature.
    """
    spadlcolumns = [
        "game_id",
        "original_event_id",
        "action_id",
        "period_id",
        "time_seconds",
        "team_id",
        "player_id",
        "start_x",
        "start_y",
        "end_x",
        "end_y",
        "result_id",
        "result_name",
        "bodypart_id",
        "bodypart_name",
        "type_id",
        "type_name",
    ]
    dummy_actions = pd.DataFrame(np.zeros((10, len(spadlcolumns))), columns=spadlcolumns)
    for c in spadlcolumns:
        if "name" in c:
            dummy_actions[c] = dummy_actions[c].astype(str)
    gs = to_gamestates(dummy_actions, nb_prev_actions)  # type: ignore
    return list(pd.concat([f(gs) for f in fs], axis=1).columns.values)
