from socceraction.types import GameStatesFeatureTransfomer
from socceraction.attributes.utils import simple, ftype
import numpy as np
import pandas as pd
from socceraction.atomic.spadl import to_gamestates

def feature_column_names(fs: list[GameStatesFeatureTransfomer], nb_prev_actions: int = 3) -> list[str]:
    """Return the names of the features generated by a list of transformers.

    Parameters
    ----------
    fs : list(callable)
        A list of feature transformers.
    nb_prev_actions : int, default=3  # noqa: DAR103
        The number of previous actions included in the game state.

    Returns
    -------
    list(str)
        The name of each generated feature.
    """
    spadlcolumns = [
        'game_id',
        'original_event_id',
        'action_id',
        'period_id',
        'time_seconds',
        'team_id',
        'player_id',
        'x',
        'y',
        'dx',
        'dy',
        'bodypart_id',
        'bodypart_name',
        'type_id',
        'type_name',
    ]
    dummy_actions = pd.DataFrame(np.zeros((10, len(spadlcolumns))), columns=spadlcolumns)
    for c in spadlcolumns:
        if 'name' in c:
            dummy_actions[c] = dummy_actions[c].astype(str)
    gs = to_gamestates(dummy_actions, nb_prev_actions)  # type: ignore
    return list(pd.concat([f(gs) for f in fs], axis=1).columns)

__all__ = [
    'feature_column_names',
    'simple',
    'ftype',
]
